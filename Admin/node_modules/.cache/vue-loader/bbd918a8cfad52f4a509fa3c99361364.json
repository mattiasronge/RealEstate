{"remainingRequest":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mattiasronge/Desktop/richar/Admin/node_modules/vuejs-smart-table/src/VTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/vuejs-smart-table/src/VTable.vue","mtime":499162500000},{"path":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mattiasronge/Desktop/richar/Admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport { doFilter, doSort, calculateTotalPages, doPaginate } from './table-utils'\nimport store from './store'\nimport Vue from 'vue'\n\nexport default {\n  name: 'SmartTable',\n  props: {\n    data: {\n      required: true,\n      type: Array\n    },\n    filters: {\n      required: false,\n      type: Object\n    },\n    currentPage: {\n      required: false,\n      type: Number\n    },\n    pageSize: {\n      required: false,\n      type: Number\n    },\n    allowSelection: {\n      required: false,\n      type: Boolean,\n      default: false\n    },\n    selectionMode: {\n      required: false,\n      type: String,\n      default: 'single'\n    },\n    selectedClass: {\n      required: false,\n      type: String,\n      default: 'vt-selected'\n    },\n    customSelection: {\n      required: false,\n      type: Boolean\n    },\n    hideSortIcons: {\n      required: false,\n      type: Boolean\n    }\n  },\n  beforeCreate () {\n    this.store = new Vue(store)\n  },\n  provide () {\n    return {\n      store: this.store\n    }\n  },\n  data () {\n    return {\n      state: this.store._data,\n      initialLoad: false\n    }\n  },\n  computed: {\n    needsPaginationReset () {\n      return this.currentPage > this.totalPages\n    },\n    filteredData () {\n      if (this.data.length === 0) {\n        return []\n      }\n\n      if (typeof this.filters !== 'object') {\n        return this.data\n      }\n\n      return doFilter(this.data, this.filters)\n    },\n    totalItems () {\n      return this.filteredData.length\n    },\n    sortedData () {\n      if ((this.state.sortKey || this.state.customSort) && this.state.sortOrder !== 0) {\n        return doSort(this.filteredData, this.state.sortKey, this.state.customSort, this.state.sortOrder)\n      }\n\n      return this.filteredData\n    },\n    totalPages () {\n      if (!this.pageSize) return 0\n\n      return calculateTotalPages(this.totalItems, this.pageSize)\n    },\n    displayData () {\n      if (this.pageSize) {\n        return doPaginate(this.sortedData, this.pageSize, this.currentPage)\n      }\n\n      return this.sortedData\n    },\n    selectedRows () {\n      return this.state.selectedRows\n    }\n  },\n  watch: {\n    displayData: {\n      handler () {\n        if (!this.initialLoad) {\n          this.initialLoad = true\n          this.$emit('loaded', this)\n        }\n      },\n      immediate: true\n    },\n    selectionMode: {\n      handler (mode) {\n        this.state.selectionMode = mode\n      },\n      immediate: true\n    },\n    selectedClass: {\n      handler (selectedClass) {\n        this.state.selectedClass = selectedClass\n      },\n      immediate: true\n    },\n    customSelection: {\n      handler (customSelection) {\n        this.state.customSelection = customSelection\n      },\n      immediate: true\n    },\n    hideSortIcons: {\n      handler (hideSortIcons) {\n        this.state.hideSortIcons = hideSortIcons\n      },\n      immediate: true\n    },\n    needsPaginationReset: {\n      handler (needsReset) {\n        if (needsReset) {\n          this.$emit('update:currentPage', 1)\n        }\n      },\n      immediate: true\n    },\n    totalPages: {\n      handler (totalPages) {\n        this.$emit('totalPagesChanged', totalPages)\n      },\n      immediate: true\n    },\n    totalItems: {\n      handler (totalItems) {\n        this.$emit('totalItemsChanged', totalItems)\n      },\n      immediate: true\n    },\n    selectedRows: {\n      handler (selected) {\n        this.$emit('selectionChanged', selected)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    revealItem (item) {\n      if (!this.pageSize) {\n        return true\n      }\n\n      let index\n      if (typeof item === 'function') {\n        index = this.sortedData.findIndex(item)\n      } else {\n        index = this.sortedData.indexOf(item)\n      }\n\n      if (index === -1) {\n        return false\n      }\n\n      const currentPage = Math.ceil((index + 1) / this.pageSize)\n      this.$emit('update:currentPage', currentPage)\n\n      return true\n    },\n    revealPage (page) {\n      if (!this.pageSize || Number.isNaN(page) || page < 1) {\n        return\n      }\n\n      this.$emit('update:currentPage', page)\n    },\n    selectRow (row) {\n      this.store.selectRow(row)\n    },\n    selectRows (rows) {\n      this.store.selectRows(rows)\n    },\n    deselectRow (row) {\n      this.store.deselectRow(row)\n    },\n    deselectRows (rows) {\n      this.store.deselectRows(rows)\n    },\n    selectAll () {\n      if (this.selectionMode === 'single') return\n\n      this.store.selectAll(this.data)\n    },\n    deselectAll () {\n      this.store.deselectAll()\n    }\n  }\n}\n",{"version":3,"sources":["VTable.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VTable.vue","sourceRoot":"node_modules/vuejs-smart-table/src","sourcesContent":["<template>\n  <table>\n    <slot name=\"head\"/>\n    <slot name=\"body\" :displayData=\"displayData\"/>\n  </table>\n</template>\n\n<script>\nimport { doFilter, doSort, calculateTotalPages, doPaginate } from './table-utils'\nimport store from './store'\nimport Vue from 'vue'\n\nexport default {\n  name: 'SmartTable',\n  props: {\n    data: {\n      required: true,\n      type: Array\n    },\n    filters: {\n      required: false,\n      type: Object\n    },\n    currentPage: {\n      required: false,\n      type: Number\n    },\n    pageSize: {\n      required: false,\n      type: Number\n    },\n    allowSelection: {\n      required: false,\n      type: Boolean,\n      default: false\n    },\n    selectionMode: {\n      required: false,\n      type: String,\n      default: 'single'\n    },\n    selectedClass: {\n      required: false,\n      type: String,\n      default: 'vt-selected'\n    },\n    customSelection: {\n      required: false,\n      type: Boolean\n    },\n    hideSortIcons: {\n      required: false,\n      type: Boolean\n    }\n  },\n  beforeCreate () {\n    this.store = new Vue(store)\n  },\n  provide () {\n    return {\n      store: this.store\n    }\n  },\n  data () {\n    return {\n      state: this.store._data,\n      initialLoad: false\n    }\n  },\n  computed: {\n    needsPaginationReset () {\n      return this.currentPage > this.totalPages\n    },\n    filteredData () {\n      if (this.data.length === 0) {\n        return []\n      }\n\n      if (typeof this.filters !== 'object') {\n        return this.data\n      }\n\n      return doFilter(this.data, this.filters)\n    },\n    totalItems () {\n      return this.filteredData.length\n    },\n    sortedData () {\n      if ((this.state.sortKey || this.state.customSort) && this.state.sortOrder !== 0) {\n        return doSort(this.filteredData, this.state.sortKey, this.state.customSort, this.state.sortOrder)\n      }\n\n      return this.filteredData\n    },\n    totalPages () {\n      if (!this.pageSize) return 0\n\n      return calculateTotalPages(this.totalItems, this.pageSize)\n    },\n    displayData () {\n      if (this.pageSize) {\n        return doPaginate(this.sortedData, this.pageSize, this.currentPage)\n      }\n\n      return this.sortedData\n    },\n    selectedRows () {\n      return this.state.selectedRows\n    }\n  },\n  watch: {\n    displayData: {\n      handler () {\n        if (!this.initialLoad) {\n          this.initialLoad = true\n          this.$emit('loaded', this)\n        }\n      },\n      immediate: true\n    },\n    selectionMode: {\n      handler (mode) {\n        this.state.selectionMode = mode\n      },\n      immediate: true\n    },\n    selectedClass: {\n      handler (selectedClass) {\n        this.state.selectedClass = selectedClass\n      },\n      immediate: true\n    },\n    customSelection: {\n      handler (customSelection) {\n        this.state.customSelection = customSelection\n      },\n      immediate: true\n    },\n    hideSortIcons: {\n      handler (hideSortIcons) {\n        this.state.hideSortIcons = hideSortIcons\n      },\n      immediate: true\n    },\n    needsPaginationReset: {\n      handler (needsReset) {\n        if (needsReset) {\n          this.$emit('update:currentPage', 1)\n        }\n      },\n      immediate: true\n    },\n    totalPages: {\n      handler (totalPages) {\n        this.$emit('totalPagesChanged', totalPages)\n      },\n      immediate: true\n    },\n    totalItems: {\n      handler (totalItems) {\n        this.$emit('totalItemsChanged', totalItems)\n      },\n      immediate: true\n    },\n    selectedRows: {\n      handler (selected) {\n        this.$emit('selectionChanged', selected)\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    revealItem (item) {\n      if (!this.pageSize) {\n        return true\n      }\n\n      let index\n      if (typeof item === 'function') {\n        index = this.sortedData.findIndex(item)\n      } else {\n        index = this.sortedData.indexOf(item)\n      }\n\n      if (index === -1) {\n        return false\n      }\n\n      const currentPage = Math.ceil((index + 1) / this.pageSize)\n      this.$emit('update:currentPage', currentPage)\n\n      return true\n    },\n    revealPage (page) {\n      if (!this.pageSize || Number.isNaN(page) || page < 1) {\n        return\n      }\n\n      this.$emit('update:currentPage', page)\n    },\n    selectRow (row) {\n      this.store.selectRow(row)\n    },\n    selectRows (rows) {\n      this.store.selectRows(rows)\n    },\n    deselectRow (row) {\n      this.store.deselectRow(row)\n    },\n    deselectRows (rows) {\n      this.store.deselectRows(rows)\n    },\n    selectAll () {\n      if (this.selectionMode === 'single') return\n\n      this.store.selectAll(this.data)\n    },\n    deselectAll () {\n      this.store.deselectAll()\n    }\n  }\n}\n</script>\n"]}]}